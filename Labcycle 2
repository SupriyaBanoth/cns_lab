//diffie hellman
import java.util.*;
public class DiffieHellman {
    public static void main(String[] args) {
        int P = 23;  // prime number
        int G = 9;   // primitive root
        int a = 4;   // Alice's private key
        int b = 3;   // Bob's private key

        int x = (int) Math.pow(G, a) % P;  // Alice's public key
        int y = (int) Math.pow(G, b) % P;  // Bob's public key

        int ka = (int) Math.pow(y, a) % P; // Alice's secret key
        int kb = (int) Math.pow(x, b) % P; // Bob's secret key

        System.out.println("Public Key of Alice: " + x);
        System.out.println("Public Key of Bob: " + y);
        System.out.println("Secret Key for Alice: " + ka);
        System.out.println("Secret Key for Bob: " + kb);
    }
}
```

---

### ✅ **Week 9: SHA-512 Message Digest**

```java
import java.security.*;
public class SHA512Example {
    public static void main(String[] args) throws Exception {
        String msg = "Hello CNS Lab";
        MessageDigest md = MessageDigest.getInstance("SHA-512");
        byte[] digest = md.digest(msg.getBytes());
        System.out.println("Message: " + msg);
        System.out.println("SHA-512 Digest:");
        for (byte b : digest)
            System.out.printf("%02x", b);
    }
}
```

---

### ✅ **Week 10: Digital Signature**

```java
import java.security.*;
public class DigitalSignatureExample {
    public static void main(String[] args) throws Exception {
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("DSA");
        keyGen.initialize(1024);
        KeyPair pair = keyGen.generateKeyPair();
        PrivateKey privKey = pair.getPrivate();
        PublicKey pubKey = pair.getPublic();

        Signature sign = Signature.getInstance("SHA256withDSA");
        sign.initSign(privKey);
        byte[] msg = "This is a test message".getBytes();
        sign.update(msg);
        byte[] signature = sign.sign();

        System.out.println("Signature: " + new String(signature));

        sign.initVerify(pubKey);
        sign.update(msg);
        System.out.println("Verification: " + sign.verify(signature));
    }
}
```
